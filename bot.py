from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.types import Message, ReplyKeyboardRemove, TelegramObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import BaseMiddleware
import asyncio
from typing import Callable, Dict, Any, Awaitable

from config import TG_TOKEN, ADMIN_ID
from keyboard import *
import db
from words import *


bot = Bot(TG_TOKEN)
dp = Dispatcher()


class Text(BaseMiddleware):
    async def __call__(self, handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]], event: Message, data: Dict[str, Any]):
        try:
            curr_buttons = eval(db.get_data_from_db(event.from_user.id, 'buttons')[0][0])
            if event.text is not None: curr_buttons.append(event.text)
            db.update_db(event.from_user.id, ('buttons',),  (str(curr_buttons),))
        except Exception as e:
            print(e)
        return await handler(event, data)
    

class Reg(StatesGroup):
    main = State()
    buttons = State()


class Form(StatesGroup):
    start = State()
    number_of_rooms = State()
    region = State()
    photos = State()


class FAQ(StatesGroup):
    main = State()
    main2 = State()


class Sender(StatesGroup):
    text = State()
    photo = State()
    confirm = State()
    

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(start_message, reply_markup=contact_keyboard(message.from_user.id))
    
    
@dp.message(F.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å GetFlat')
async def menu(message: Message, state: FSMContext):
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö, –æ—Ç–≤–µ—Ç–∏–≤ –≤—Å–µ–≥–æ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞¬†‚≠ê')
    await state.set_state(Form.start)
    await asyncio.sleep(0.5)
    await asyncio.create_task(start_form(message, state))


@dp.message(F.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å GetFlat')
async def chat(message: Message, state: FSMContext):
    await message.answer('@wegetflat')


@dp.message(F.contact)
async def contact(message: Message, state: FSMContext, back = False):
    if back:
        await message.answer('–° GetFlat –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã –¥–æ +30%¬†üìà', reply_markup=main_keyboard())
        await state.set_state(Reg.main)
    elif message.contact is not None and message.contact.user_id == message.from_user.id:
        await message.answer('–° GetFlat –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã –¥–æ +30%¬†üìà', reply_markup=main_keyboard())
        await state.set_state(Reg.main)
        db.insert_user_to_db(message.from_user.id)
        db.update_db(message.from_user.id, ('number','username','name'), (f'+{message.contact.phone_number}', f'@{message.from_user.username}', message.from_user.full_name))

        for id in ADMIN_ID:
            try:
                await bot.send_message(id, text=f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞: \n{message.from_user.full_name}  @{message.from_user.username} +{message.contact.phone_number}')
            except Exception as e:
                print(e)       

    else:
        await message.answer(incorrect_contact_message)

@dp.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def sender(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        return
    
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Sender.text)


@dp.message(Sender.text, F.text)
async def sender_text(message: Message, state: FSMContext):
    await state.update_data(text = message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–µ—Ç —Ñ–æ—Ç–æ"', reply_markup=no_photo_keyboard())
    await state.set_state(Sender.photo)


@dp.message(Sender.photo, F.text == '–ù–µ—Ç —Ñ–æ—Ç–æ')
async def sender_no_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=confirm_keyboard())
    await message.answer(data['text'])
    await state.set_state(Sender.confirm)


@dp.message(Sender.photo, F.photo)
async def sender_photo(message: Message, state: FSMContext):
    await state.update_data(photo = message.photo[-1].file_id)
    data = await state.get_data()
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=confirm_keyboard())
    await message.answer_photo(photo=message.photo[-1].file_id, caption=data['text'])
    await state.set_state(Sender.confirm)


@dp.message(Sender.confirm, F.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
async def sender_yes(message: Message, state: FSMContext):
    data = await state.get_data()

    for id in db.get_users_from_db('user_id'):
        try:
            if 'photo' not in data:
                await bot.send_message(id[0], data['text'])
            else:
                await bot.send_photo(id[0], photo=data['photo'], caption=data['text'])

        except Exception as e:
            print(e)
        await asyncio.sleep(1)

    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=contact_keyboard(message.from_user.id))
    await state.clear()

@dp.message(Sender.confirm, F.text == '–û—Ç–º–µ–Ω–∏—Ç—å')
async def sender_no(message: Message, state: FSMContext):
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=contact_keyboard(message.from_user.id))
    await state.clear()


@dp.message(F.text == show_applications_button_text)
async def show_forms(message: Message):
    if message.from_user.id not in ADMIN_ID:
        return  
    try:
        for name, username, number, form, buttons in db.get_users_from_db('name, username, number, form, buttons'):
            if form is None or len(form) == 0:
                await message.answer(f'–ò–º—è: {name}\n\n–¢–µ–ª–µ–≥—Ä–∞–º: {username}\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}\n\n–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞')
            else:
                form = eval(form)
                buttons = eval(buttons)
                await message.answer(f'–ò–º—è: {name}\n\n–¢–µ–ª–µ–≥—Ä–∞–º: {username}\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {form.get("number_of_rooms")}\n\n–†–∞–π–æ–Ω: {form.get("region")}\n\n–ò—Å—Ç–æ—Ä–∏—è –∫–Ω–æ–ø–æ–∫: {" > ".join(buttons)}')
                if len(form['photos']) > 1:
                    for photo in form['photos']:
                        await message.answer_photo(photo)
                        await asyncio.sleep(0.2)
            await asyncio.sleep(0.5)
    except Exception as e:
        await message.answer(no_applications_message)
        print(e)


@dp.message(F.text == '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö')
@dp.message(Reg.main)
async def menu(message: Message, state: FSMContext, back = False):
    if message.text in ('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å GetFlat', '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'):
        await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö, –æ—Ç–≤–µ—Ç–∏–≤ –≤—Å–µ–≥–æ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:', reply_markup=form_keyboard0())
        await state.set_state(Form.start)

    elif message.text in ('–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º', '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö'):
        if message.text == '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö':
            await state.set_state(FAQ.main2)
            form = True
        else:
            form = False
            await state.set_state(FAQ.main)
        await message.answer('''–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ãüëá¬†''',
                             reply_markup=faq_main_keyboard(form))


@dp.message(FAQ.main)
async def q(message: Message, state: FSMContext):
    
    form = False

    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('''–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ãüëá¬†''',
                             reply_markup=faq_main_keyboard(form))
        await state.set_state(FAQ.main)


    if message.text == '–ß—Ç–æ —Ç–∞–∫–æ–µ GetFlat –∏ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?¬†':
        await message.answer('GetFlat - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Å–¥–∞—á–µ¬†–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –∞—Ä–µ–Ω–¥—É –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞', reply_markup=faq_keyboard3())

    elif message.text == '–ö–æ–º–º–∏—Å–∏—è –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã':
        await message.answer('''–í GetFlat –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å 1 –∏–∑ 3 —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏ –æ—Ç 16 –¥–æ 20%. –ö–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤:

‚ñ™Ô∏è–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π¬†
‚ñ™Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚ñ™Ô∏è–£–±–æ—Ä–∫–∞, —Ç–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤
‚ñ™Ô∏è–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç''', reply_markup=faq_keyboard2(form))

    elif message.text == '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç':
        await message.answer('–í—ã–ø–ª–∞—Ç—ã –∏ –æ—Ç—á–µ—Ç—ã –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞, –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –∏ –ø–æ—á—Ç—É. –¢–∞–∫–∂–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–≤–æ–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.', reply_markup=faq_keyboard2(form))

    elif message.text == '–ü—Ä–æ —Ä–∞–π–æ–Ω—ã':
        await message.answer('''–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–ª—è  –ø–æ—Å—É—Ç–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã —Ä–∞–π–æ–Ω—ã –≤ –î—É–±–∞–µ:¬†
‚ñ™Ô∏èPalm Jumeirah
‚ñ™Ô∏èJBR
‚ñ™Ô∏èMarina
‚ñ™Ô∏èDowntown & Business Bay
‚ñ™Ô∏èDubai Harbour
–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å –µ—Å–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ, Getflat –∑–∞—Å—Ç–∞–≤–∏—Ç –∏—Ö —Ä–∞–±–æ—Ç–∞—Ç—å !''', reply_markup=faq_keyboard2(form))

    elif message.text == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å  –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤':
        await message.answer('''–í GetFlat –º—ã —Å–µ—Ä—å–µ–∑–Ω–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:
‚ñ™Ô∏è–í–∑–∏–º–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏
‚ñ™Ô∏è–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7
‚ñ™Ô∏è–ü—Ä–æ–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≥–æ—Å—Ç–µ–π
‚ñ™Ô∏è–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏''', reply_markup=faq_keyboard2(form))

    elif message.text == '–õ–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ':
        await message.answer('–í GetFlat –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π', reply_markup=faq_keyboard2(form))


@dp.message(FAQ.main2)
async def q(message: Message, state: FSMContext):
    
    form = True

    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('''–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ãüëá¬†''',
                             reply_markup=faq_main_keyboard(form))
        await state.set_state(FAQ.main2)


    if message.text == '–ß—Ç–æ —Ç–∞–∫–æ–µ GetFlat –∏ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?¬†':
        await message.answer('GetFlat - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Å–¥–∞—á–µ¬†–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –∞—Ä–µ–Ω–¥—É –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞', reply_markup=faq_keyboard3())

    elif message.text == '–ö–æ–º–º–∏—Å–∏—è –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã':
        await message.answer('''–í GetFlat –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å 1 –∏–∑ 3 —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏ –æ—Ç 16 –¥–æ 20%. –ö–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤:

‚ñ™Ô∏è–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π¬†
‚ñ™Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚ñ™Ô∏è–£–±–æ—Ä–∫–∞, —Ç–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤
‚ñ™Ô∏è–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç''', reply_markup=faq_keyboard2(form))

    elif message.text == '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç':
        await message.answer('GetFlat - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Å–¥–∞—á–µ¬†–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –∞—Ä–µ–Ω–¥—É –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞', reply_markup=faq_keyboard2(form))

    elif message.text == '–ü—Ä–æ —Ä–∞–π–æ–Ω—ã':
        await message.answer('''–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–ª—è  –ø–æ—Å—É—Ç–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã —Ä–∞–π–æ–Ω—ã –≤ –î—É–±–∞–µ:¬†
‚ñ™Ô∏èPalm Jumeirah
‚ñ™Ô∏èJBR
‚ñ™Ô∏èMarina
‚ñ™Ô∏èDowntown & Business Bay
‚ñ™Ô∏èDubai Harbour
–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å –µ—Å–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ, Getflat –∑–∞—Å—Ç–∞–≤–∏—Ç –∏—Ö —Ä–∞–±–æ—Ç–∞—Ç—å !''', reply_markup=faq_keyboard2(form))

    elif message.text == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å  –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤':
        await message.answer('''–í GetFlat –º—ã —Å–µ—Ä—å–µ–∑–Ω–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:
‚ñ™Ô∏è–í–∑–∏–º–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏
‚ñ™Ô∏è–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7
‚ñ™Ô∏è–ü—Ä–æ–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≥–æ—Å—Ç–µ–π
‚ñ™Ô∏è–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏''', reply_markup=faq_keyboard2(form))

    elif message.text == '–õ–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ':
        await message.answer('–í GetFlat –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π', reply_markup=faq_keyboard2(form))


@dp.message(Form.start)
async def start_form(message: Message, state: FSMContext, back = False):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥' and not back:
        await state.set_state(Reg.main)
        await asyncio.create_task(contact(message, state, True))
        return
    
    await message.answer('''1. –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –≤–∞—à–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö?¬†

–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ¬†—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Çüëá''', reply_markup=form_keyboard1())
    await state.set_state(Form.number_of_rooms)


@dp.message(Form.number_of_rooms)
async def number_of_rooms(message: Message, state: FSMContext, back = False):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥' and not back:
        await state.set_state(Reg.main)
        await asyncio.create_task(contact(message, state, True))
        return

    if message.text != '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥': await state.update_data(number_of_rooms = message.text) 
    await message.answer('''2. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã?¬†

–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Çüëá''', reply_markup=form_keyboard2())
    await state.set_state(Form.region)


@dp.message(Form.region)    
async def region(message: Message, state: FSMContext, back = False):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥' and not back:
        await state.set_state(Form.start)
        await asyncio.create_task(start_form(message, state, True))
        return

    if message.text != '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥': await state.update_data(region = message.text)
    await message.answer('3. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö, –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã"¬†üì∑', reply_markup=form_keyboard3())
    await state.set_state(Form.photos)
    await state.update_data(photos = [])


@dp.message(F.photo, Form.photos)    
async def photos(message: Message, state: FSMContext):
    data = await state.get_data()
    data = data['photos']
    data.append(message.photo[-1].file_id)
    await state.update_data(photos = data)


@dp.message(Form.photos)    
async def photos_text(message: Message, state: FSMContext, back = False):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥' and not back:
        await state.set_state(Form.number_of_rooms)
        await asyncio.create_task(number_of_rooms(message, state, True))
        return

    data = await state.get_data()
    db.insert_user_to_db(message.from_user.id)
    db.update_db(message.from_user.id, ('form',), (str(dict(data.items())),))
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –≤ –ø—É—Ç–∏, –º–µ–Ω–µ–¥–∂–µ—Ä GetFlat —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüë©‚Äçüíª',
                         reply_markup=form_end())
    await asyncio.create_task(send_form(message))
    await state.clear()


async def send_form(message: Message):
    username, name, number, form = db.get_data_from_db(message.from_user.id, 'username, name, number, form')[0]
    form = eval(form)

    for id in ADMIN_ID:
        try:
            if len(form['photos']) == 0:
                await bot.send_message(id, f'{name}, {username}, {number}, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞:\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {form["number_of_rooms"]}\n –†–∞–π–æ–Ω: {form["region"]}\n –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã.')
            else:
                await bot.send_message(id, f'{name}, {username}, {number}, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞:\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {form["number_of_rooms"]}\n –†–∞–π–æ–Ω: {form["region"]}\n –ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:')
                for i in form['photos']:
                    await bot.send_photo(chat_id=id, photo=i, disable_notification=True)
                    await asyncio.sleep(0.2)
        
            await asyncio.sleep(1)
        except Exception as e:
            print(e)


@dp.message(F.photo)
async def send_photo(message: Message):
    await message.answer(sending_picture_message)
    for id in ADMIN_ID:
        try:
            await bot.send_photo(id, message.photo[-1].file_id, caption=f'@{message.from_user.username} {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
        except Exception as e:
            print(e)

